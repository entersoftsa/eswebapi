'use strict';

/* Controllers */

var smeControllers = angular.module('smeControllers', ['kendo.directives', 'underscore', 'es.Web.UI', 'ui.bootstrap', 'ngFileUpload', 'dx']);


smeControllers.controller('mainCtrl', ['$location', '$scope', '$log', 'esMessaging', 'esWebApi', 'esGlobals',
    function($location, $scope, $log, esMessaging, esWebApiService, esGlobals) {


        /* boot strap configuration */
        $scope.configure = function(e) {
            $("#configurator-wrap").toggleClass("hidden-xs");
        }

        $scope.blob = "";

        $scope.dimension = "common-bootstrap";
        $scope.dimensionOptions = {
            dataTextField: "text",
            dataValueField: "value",
            dataSource: [{
                text: 'Default',
                value: 'common'
            }, {
                text: 'Bootstrap',
                value: 'common-bootstrap'
            }],
            change: function(e) {
                window.kendoThemeChooser.changeCommon(this.value(), true);
            }
        };

        $scope.theme = "bootstrap";
        $scope.themeOptions = {
            dataTextField: "text",
            dataValueField: "value",
            dataSource: [{
                text: "Default",
                value: "default"
            }, {
                text: "Blue Opal",
                value: "blueopal"
            }, {
                text: "Bootstrap",
                value: "bootstrap"
            }, {
                text: "Silver",
                value: "silver"
            }, {
                text: "Uniform",
                value: "uniform"
            }, {
                text: "Metro",
                value: "metro"
            }, {
                text: "Black",
                value: "black"
            }, {
                text: "Metro Black",
                value: "metroblack"
            }, {
                text: "High Contrast",
                value: "highcontrast"
            }, {
                text: "Moonlight",
                value: "moonlight"
            }, {
                text: "Flat",
                value: "flat"
            }],
            change: function(e) {
                window.kendoThemeChooser.changeTheme($scope.theme, true);
            }
        };


        $scope.fontsizeOptions = {
            dataTextField: "text",
            dataValueField: "value",
            value: 14,
            height: 204,
            autoBind: true,
            dataSource: [{
                text: "10px",
                value: 10
            }, {
                text: "12px",
                value: 12
            }, {
                text: "14px",
                value: 14
            }, {
                text: "16px",
                value: 16
            }, {
                text: "18px",
                value: 18
            }, {
                text: "20px",
                value: 20
            }],
            change: changeFontSize
        };
        $scope.fontsize = 14;

        function changeFontSize(e) {
            $("body").css("font-size", $scope.fontsize + "px");
        }

        changeFontSize();


        /* rest logic */

        $scope.theGlobalUser = "";

        esMessaging.subscribe("ES_HTTP_CORE_ERR", function(rejection, status) {
            var s = esGlobals.getUserMessage(rejection, status);
            $scope.esnotify.error(s.messageToShow);
        });

        esMessaging.subscribe("AUTH_CHANGED", function(esSession, b) {
            if (!b) {
                $scope.theGlobalUser = "Nobody";
                return;
            }

            $scope.theGlobalUser = esSession.connectionModel.Name;
        });
    }
]);

smeControllers.controller('loginCtrl', ['$location', '$rootScope', '$scope', '$log', 'esWebApi', 'esUIHelper', '_', 'esCache', 'esMessaging', 'esGlobals',
    function($location, $rootScope, $scope, $log, esWebApiService, esWebUIHelper, _, cache, esMessaging, esGlobals) {

        $scope.credentials = {
            UserID: 'admin',
            Password: 'entersoft',
            BranchID: 'ΑΘΗ',
            LangID: 'el-GR'
        };

        var claims = {
            ESDeviceID: 'kar device',
            ESApplicationID: "Sme App",
            ESChannelID: "es web",
            MyStrVar: "MyStrVar-Value",
            MyIntVar: 234,
            ESMyStrVar: "ESMyStrVar-Value",
            ESMyIntVar: 456,
            ESDecVar: 332.6987,
            ESDateVar: new Date()
        };

        $scope.doLogin = function() {
            esWebApiService.openSession($scope.credentials, claims)
                .then(function(rep) {
                        $log.info(rep);
                        $location.path("/properties");
                    },
                    function(err) {
                        $log.error(err);
                    });
        }

        $scope.version = {};

        /* Date Range Sample Section */
        var x = function(p) {
            return "Hello World";
        };

        $scope.y = function() {
            return "Hi !!!";
        }


        $scope.onChange = function(kendoEvent) {
            if (!kendoEvent) {
                return;
            }
            //kendoEvent.sender.text(mapper(kendoEvent.sender.dataItem(), $scope.myDateVal));
        }

        $scope.myDateVal = new esGlobals.ESDateParamVal("myP", {
            //dRange: 'ESDateRange(SpecificDate, #1753/01/01#, Day, 0)', ESDateRange(SpecificDate, #9999/01/01#, SpecificDate, #1753/01/01#)
            dRange: 'ESDateRange(SpecificDate, #9999/01/01#, SpecificDate, #1753/01/01#)',
            fromD: null,
            toD: null
        });


        /* End Section */

    }
]);

smeControllers.controller('propertiesCtrl', ['$location', '$window', '$scope', '$log', 'esWebApi', 'esUIHelper', '_', 'esCache', 'esMessaging', 'esGlobals',
    function($location, $window, $scope, $log, esWebApiService, esWebUIHelper, _, cache, esMessaging, esGlobals) {

        $scope.logout = function() {
            esWebApiService.logout()
                .then(function() {
                    alert("I am out !!!");
                });
        }

        var dVal = esWebUIHelper.createESParams([{ id: 'UserID', value: '123' }, { id: 'bg', value: '456' }]);

        $scope.getVersionInfo = function() {
            $scope.version = {};

            $scope.version.esAngularVersion = esGlobals.getVersion();

            esWebApiService.fetchSessionInfo()
                .success(function(data) {
                    $scope.version.esEBSVersion = data;
                });

        };

    }
]);

smeControllers.controller('examplesCtrl', ['$log', '$q', '$scope', 'Upload', 'esWebApi', 'esUIHelper', 'esGlobals', 'esCache', 'esGeoLocationSrv',
    function($log, $q, $scope, Upload, esWebApi, esWebUIHelper, esGlobals, esCache, esGeoLocationSrv) {

        // $scope.gRows = [{
        //     GTitle: "Turn Over",
        //     GValue: 34.56,
        //     GScale: "AgeScale",
        //     GType: 'linear'
        // }, {
        //     GTitle: "Net Income",
        //     GValue: 29.98,
        //     GScale: "AgeScale"
        // }];

        $scope.gRows = [];

        $scope.userLogoUrl = esWebApi.downloadES00BlobURLByObject("ESGOUser", "8AB22473-DBEB-4AD0-BB90-D69C13C1A538", 0);

        $scope.pGroup = "ESMMStockItem";
        $scope.pFilter = "ESMMStockItem_def";
        $scope.esWebAPI = esWebApi;

        $scope.cacheInfo = function() {
            $scope.cacheStats = esCache.stats();
        };

        $scope.validateToken = function() {
            esWebApi.validateToken(esGlobals.getWebApiToken())
                .then(function(ret) {
                    $log.info(ret.data);
                }, function(err) {
                    $log.error(err);
                });
        };

        $scope.uploadPic = function(myFile) {
            var okf = function(retFile) {
                $log.info("file uploaded ....");
            };

            var errf = function(response) {
                if (response.status > 0)
                    $scope.errorMsg = response.status + ': ' + response.data;
                else {
                    $scope.errorMsg = "Ooops something wnet wrong";
                }
                $log.error($scope.errorMsg);
            };

            var progressf = function(evt) {
                myFile.progress = Math.min(100, parseInt(100.0 * evt.loaded / evt.total));
            };

            var doc = {
                "GID": "3536eaa3-6c67-4d15-a8d9-3519711969c9",
                "Title": "Hello File",
                "Description": $scope.username,
                "Caption": "Tehcnical Guide for Hello File",
                "OriginalFN": "xxx.pdf"
            };

            esWebApi.addOrUpdateES00Document(doc, myFile, okf, errf, progressf);
        }

        //fetchPublicQueryInfo sample
        $scope.fetchPQInfo = function() {
            esWebApi.fetchPublicQueryInfo($scope.pGroup, $scope.pFilter)
                .then(function(ret) {
                    // This is the gridlayout as defined in the EBS Public Query based on .NET Janus GridEx Layout
                    $scope.esJanusGridLayout = ret.data;

                    // This is the neutral-abstract representation of the Janus GridEx Layout according to the ES WEB UI simplification
                    $scope.esWebGridInfo = esWebUIHelper.winGridInfoToESGridInfo($scope.pGroup, $scope.pFilter, $scope.esJanusGridLayout);

                    // This is the kendo-grid based layout ready to be assigned to kendo-grid options attribute for rendering the results
                    // and for executing the corresponding Public Query
                    $scope.esGridOptions = esWebUIHelper.esGridInfoToKInfo($scope.pGroup, $scope.pFilter, {}, $scope.esWebGridInfo);
                }, function(err, status) {
                    alert(err.UserMessage || err.MessageID || "Generic Error");
                });
        }

        $scope.fetchDeviceInfo = function() {
            esWebApi.fetchDeviceInfo($scope.deviceCode)
                .then(function(ret) {
                    // This is the gridlayout as defined in the EBS Public Query based on .NET Janus GridEx Layout
                    $scope.deviceInfo = ret.data;
                }, function(err, status) {
                    alert(err.UserMessage || err.MessageID || "Generic Error");
                });
        }

        $scope.pqParams = "";
        // fetchPublicQuery sample
        $scope.dofetchPublicQuery = function() {
            var group = $scope.pGroup;
            var filter = $scope.pFilter;
            $scope.pqResult = "";

            var pqOptions = new esGlobals.ESPQOptions(-1, -1, false);
            var pars = $scope.pqParams ? JSON.parse($scope.pqParams) : null;
            var xP = new esGlobals.ESParamValues([new esGlobals.ESDateParamVal("ESDCreated", 'ESDateRange(SpecificDate, #2017/03/03#, SpecificDate, #2017/03/03#)')])
            esWebApi.fetchPublicQuery(group, filter, pqOptions, xP, 'POST')
                .then(function(ret) {
                        $scope.pqResult = ret.data;
                        $log.info(ret);
                    },
                    function(err) {
                        $scope.pqResult = err;
                        $log.error(err);
                    });
        }

        //fetchSessionInfo example
        $scope.fetchSessionInfo = function() {
            esWebApi.fetchSessionInfo()
                .then(function(ret) {
                    $scope.pSessionInfo = ret.data;
                    alert("Hello World");
                }, function(err) {
                    $scope.pSessionInfo = err;
                });
        }

        //fetchODSTableInfo example
        $scope.fetchOdsTableInfo = function() {
            esWebApi.fetchOdsTableInfo($scope.odsID)
                .then(function(ret) {
                    $scope.pTableInfo = ret.data;
                }, function(err) {
                    $scope.pTableInfo = err;
                });
        }

        //fetchODSColumnInfo example
        $scope.fetchOdsColumnInfo = function() {
            /*
            esWebApi.fetchOdsColumnInfo($scope.odsID, $scope.odsColumnID)
                .then(function(ret) {
                    $scope.pColumnInfo = ret.data;
                }, function(err) {
                    $scope.pColumnInfo = err;
                });
               */

            var blobInfo = {
                "ObjectID": "ESGOUser",
                "KeyID": "8AB22473-DBEB-4AD0-BB90-D69C13C1A538",
                "TypeID": 901,
                "TextBody": JSON.stringify({
                    elems: ["a", "bgth", "γεια σου κόσμε"]
                })
            };

            esWebApi.postBodyToES00Blob(blobInfo)
                .then(function(ret) {

                    esWebApi.getBodyFromES00Blob("ESGOUser", "8AB22473-DBEB-4AD0-BB90-D69C13C1A538", 902)
                        .then(function(bb) {
                            $scope.pColumnInfo = bb.data.TextBody;
                        }, function(bb) {
                            $scope.pColumnInfo = bb;

                        })

                }, function(err) {
                    $scope.pColumnInfo = err;
                })
        }

        //fetchOdsRelationInfo example
        $scope.fetchOdsRelationInfo = function() {
            esWebApi.fetchOdsRelationInfo($scope.odsID)
                .then(function(ret) {
                    $scope.pRelationInfo = ret.data;
                }, function(err) {
                    $scope.pRelationInfo = err;
                });
        }

        //fetchOdsMasterRelationsInfo example
        $scope.fetchOdsMasterRelationsInfo = function() {
            esWebApi.fetchOdsMasterRelationsInfo($scope.odsID, $scope.odsColumnID)
                .then(function(ret) {
                    $scope.pRelationInfo = ret.data;
                }, function(err) {
                    $scope.pRelationInfo = err;
                });
        }

        //fetchOdsDetailRelationsInfo example
        $scope.fetchOdsDetailRelationsInfo = function() {
            esWebApi.fetchOdsDetailRelationsInfo($scope.odsID, $scope.odsColumnID)
                .then(function(ret) {
                    $scope.pRelationInfo = ret.data;
                }, function(err) {
                    $scope.pRelationInfo = err;
                });
        }

        $scope.fetchServerCapabilities = function() {
            esWebApi.fetchServerCapabilities()
                .then(function(ret) {
                    $scope.pSrvCapabilities = ret;
                }, function(err) {
                    $scope.pSrvCapabilities = err;
                });
        }

        $scope.fetchUserSites = function() {
            esWebApi.fetchUserSites($scope.pUser)
                .then(function(ret) {
                    $scope.pUserSites = ret.data;
                }, function(err) {
                    $scope.pUserSites = err;
                });
        }

        $scope.GPSPosition = null;
        $scope.myMarkers = [];
        $scope.myDS = [];
        $scope.map = {};
        $scope.clusterType = 'cluster';
        $scope.getMyPosition = function() {
            $scope.GPSPosition = null;
            esGeoLocationSrv.getCurrentPosition()
                .then(function(x) {
                    $scope.GPSPosition = x;
                    var vPos = {
                        latitude: x.coords.latitude,
                        longitude: x.coords.longitude
                    };
                }, function(err) {
                    alert(err.message + " - " + err.code);
                });
        }

        $scope.resetpos = function() {
            esWebApi.fetchPublicQuery("ESCMS", "View_ES00GPSLog")
                .then(function(ret) {
                    $scope.myDS = ret.data.Rows;
                    esWebApi.fetchPublicQueryInfo("ESCMS", "View_ES00GPSLog")
                        .then(function(f) {
                            $scope.myPQInfo = esWebUIHelper.winGridInfoToESGridInfo("ESCMS", "View_ES00GPSLog", f.data);
                        })
                });
        }

        $scope.myMarkerClick = function(marker, b, c) {
            alert("Hi Marker ");
        }

        $scope.multifetchStdZoom = function() {
            var zoomOptions = new esGlobals.ESPQOptions(300, 5, false);

            var zooms = _.map($scope.pZoomID.split(','), function(k) {
                return new esGlobals.ESMultiZoomDef(k, zoomOptions, true);
            });

            esWebApi.fetchMultiStdZoom(zooms)
                .then(function(ret) {
                    $scope.pZoomResults = ret;
                }, function(err) {
                    $scope.pZoomResults = JSON.stringify(err);
                });
        }

        $scope.fetchStdZoom = function() {
            var zoomOptions = {
                WithCount: false,
                Page: 300,
                PageSize: 5

            };
            esWebApi.fetchStdZoom($scope.pZoomID, null, true)
                .then(function(ret) {
                    $scope.pZoomResults = ret.data;
                }, function(err) {
                    $scope.pZoomResults = JSON.stringify(err);
                });
        }

        //logout sample
        $scope.doLogout = function() {
            esWebApi.logout();
        };

        // fetchMultiPublicQuery
        $scope.fetchmultiPublicQuery = function() {
            var pqParams = [{
                    GroupID: "ESGOPerson",
                    FilterID: "CRM_Personlist",
                    Params: {
                        Name: "εντ*"
                    }
                },

                {
                    GroupID: "bnm",
                    FilterID: "uio",
                    Params: {
                        Name: "ao*",
                        Code: "haha"
                    }
                }
            ];

            var p2 = {
                list: pqParams
            };

            esWebApi.multiPublicQuery(pqParams)
                .then(function(x) {
                        $scope.pCompanyParamValue = x.data;
                    },
                    function(err) {
                        $scope.pCompanyParamValue = JSON.stringify(err);
                    });
        }

        //fetchCompanyParam 
        $scope.fetchCompanyParam = function() {
            esWebApi.getParameterValue($scope.pCompanyParam)
                .then(function(ret) {
                    $scope.pCompanyParamValue = ret.data;
                }, function(err) {
                    $scope.pCompanyParamValue = JSON.stringify(err);
                });
        }

        //fetchCompanyParams
        $scope.fetchCompanyParams = function() {
            if (!$scope.pCompanyParams) {
                $scope.pCompanyParams = null;
            }
            esWebApi.fetchCompanyParams($scope.pCompanyParams)
                .then(function(x) {
                        $scope.pCompanyParamsValue = x.data;
                    },

                    function(err) {
                        $scope.pCompanyParamsValue = JSON.stringify(err);
                    });
        };

        //generic function for executing esWebApi functions that take no params
        $scope.voidgeneric = function() {

            var f = esWebApi[$scope.pMethod];
            if (!f) {
                $scope.pMethodResults = "Method [" + $scope.pMethod + "] not found";
                return;
            }

            var retVal = f();
            if (retVal.then) {
                retVal.then(function(x) {
                        $scope.pMethodResults = x;
                    },

                    function(err) {
                        $scope.pMethodResults = JSON.stringify(err);
                    });
            } else {
                $scope.pMethodResults = retVal;
            }

        };

        // fetchScroller sample
        $scope.fetchScroller = function() {
            var scroller_params = {
                Name: "a*"
            };
            esWebApi.fetchScroller($scope.pGroup, $scope.pFilter, scroller_params)
                .then(function(ret) {
                        $scope.pScrollerResults = ret.data;
                        $log.info(ret);
                    },
                    function(err) {
                        $scope.pScrollerResults = err;
                        $log.error(err);
                    });
        }

        // fetchSimpleScrollerRootTable sample
        $scope.fetchSimpleScrollerRootTable = function() {
            var scroller_params = {
                Name: "a*"
            };
            esWebApi.fetchSimpleScrollerRootTable($scope.pGroup, $scope.pFilter, scroller_params)
                .then(function(ret) {
                        $scope.pScrollerResults = ret.data;
                        $log.info(ret);
                    },
                    function(err) {
                        $scope.pScrollerResults = err;
                        $log.error(err);
                    });
        }



        $scope.ImagefetchEASWebAsset = function(options) {
            esWebApi.fetchEASWebAsset($scope.pAsset, options)
                .then(function(ret) {
                        $scope.pImageResults = ret.data;
                    },
                    function(err) {
                        alert(err);
                    });
        }

        $scope.fetchBlob = function() {
            esWebApi.downloadES00BlobByGID($scope.pAsset, "png")
                .then(function(ret) {
                        var sType = ret.headers()["content-type"];
                        $log.info("File " + $scope.pAsset + " ===> " + sType);
                        var file = new Blob([ret.data], {
                            type: sType
                        });
                        //saveAs(file, "test.pdf");
                        var fU = URL.createObjectURL(file);
                        window.open(fU);
                    },
                    function(err) {
                        alert(err);
                    });
        }

        $scope.prepareBLOBURL = function() {
            return $scope.pAsset ? esWebApi.downloadES00BlobURLByGID($scope.pAsset, "png") : "";
        }

        $scope.prepareAssetURL = function() {
            return $scope.pAsset ? esWebApi.downloadAssetURL($scope.pAsset) : "";
        }

        $scope.TextfetchEASWebAsset = function(options) {
            esWebApi.fetchEASWebAsset($scope.pAsset, options)
                .then(function(ret) {
                        $scope.pTextResults = ret.data;
                    },
                    function(err) {
                        alert(err);
                    });
        }

        $scope.fetchEASWebAsset = function(options) {
            esWebApi.fetchEASWebAsset($scope.pAsset, options)
                .then(function(ret) {
                        $scope.pAssetResults = ret.data;

                        var sType = ret.headers()["content-type"];
                        $log.info("File " + $scope.pAsset + " ===> " + sType);
                        var file = new Blob([ret.data], {
                            type: sType
                        });
                        //saveAs(file, "test.pdf");
                        var fU = URL.createObjectURL(file);
                        window.open(fU);
                    },
                    function(err) {
                        $scope.pAssetResults = err;
                    });
        }

        $scope.fetchES00DocumentByGID = function() {
            esWebApi.fetchES00DocumentByGID($scope.pES00Doc)
                .then(function(ret) {
                        $scope.pES00DocResults = ret.data;
                    },
                    function(err) {
                        $scope.pES00DocResults = err;
                    });
        }

        $scope.fetchES00DocumentByCode = function() {
            esWebApi.fetchES00DocumentByCode($scope.pES00Doc)
                .then(function(ret) {
                        $scope.pES00DocResults = ret.data;
                    },
                    function(err) {
                        $scope.pES00DocResults = err;
                    });
        }

        $scope.fetchES00DocumentsByEntityGID = function() {
            esWebApi.fetchES00DocumentsByEntityGID($scope.pES00Doc, 'http://esrdfiles.azurewebsites.net')
                .then(function(ret) {
                        $scope.pES00DocResults = ret.data;
                    },
                    function(err) {
                        $scope.pES00DocResults = err;
                    });
        }

        $scope.fiImportDocument = function() {
            esWebApi.fiImportDocument($scope.xmldocstr)
                .then(function(ret) {
                    $scope.xmldocret = ret.data;
                }, function(err) {
                    $scope.xmldocret = err;
                })
        }

        $scope.fetchES00DocumentBlobDataByGID = function() {
            esWebApi.fetchES00DocumentBlobDataByGID($scope.pES00Doc)
                .then(function(result) {
                    var fileData = result.data;

                    var docType = result.headers()["content-type"];
                    $log.info("File " + $scope.pAsset + " ===> " + docType);
                    var file = new Blob([fileData], {
                        type: docType
                    });
                    //saveAs(file, "test.pdf");
                    var fU = URL.createObjectURL(file);
                    window.open(fU);
                })
                .catch(function(err) {
                    $log.error("2nd error = " + JSON.stringify(err));
                });
        }

        $scope.deleteES00Document = function() {
            var doc = {
                GID: $scope.pDocumentGID,
                TableID: $scope.pEntityType,
                TableName: $scope.pEntityTable,
                fGID: $scope.pEntityGID
            };

            esWebApi.deleteES00Document(doc)
                .then(function(ret) {
                        $scope.pES00DocResults = ret.data;
                    },
                    function(err) {
                        $scope.pES00DocResults = err;
                    });
        }

        $scope.getMimeList = function() {
            esWebApi.getMimeTypes()
                .then(function(ret) {
                        $scope.pMimeTypes = JSON.stringify(ret);
                    },
                    function(err) {
                        $scope.pMimeTypes = JSON.stringify(err);
                    });
        }

        $scope.fetchEntity = function() {
            esWebApi.fetchEntity($scope.pEntityClass, $scope.pEntityKey)
                .then(function(ret) {
                        $scope.pEntityDS = ret.data;
                    },
                    function(err) {
                        $scope.pEntityDS = err;
                    })
        }

        $scope.fetchEntityByCode = function() {
            esWebApi.fetchEntityByCode($scope.pEntityClass, $scope.pEntityCode)
                .then(function(ret) {
                        $scope.pEntityDS = ret.data;
                    },
                    function(err) {
                        $scope.pEntityDS = err;
                    })
        }

        $scope.eventLog = function() {
            esWebApi.eventLog({
                    ID: $scope.eID,
                    Description: $scope.eDescription,
                    TypeID: $scope.eSeverity
                })
                .then(function(ret) {
                        $scope.eRet = ret.data;
                    },
                    function(err) {
                        $scope.eRet = err;
                    });
        }

        $scope.fetchUserLogo = function() {
            esWebApi.fetchUserLogo($scope.lUserID)
                .then(function(ret) {
                        $scope.userPhoto = ret.data;
                    },
                    function(err) {
                        $scope.userPhoto = "";
                    });
        }

        $scope.removeCurrentUserLogo = function() {
            var blobInfo = {
                ObjectID: "ESGOPerson",
                KeyID: "11ea77d7-f5dc-4a8d-b629-845c8ff207ac"
            };

            esWebApi.removeEntityBlob(blobInfo);

            //esWebApi.removeCurrentUserLogo();
        }

        $scope.uploadUserLogo = function() {
            var blobInfo = {
                ObjectID: "ESGOPerson",
                KeyID: "11ea77d7-f5dc-4a8d-b629-845c8ff207ac"
            };
            var progressf = function(evt) {
                $scope.userLogoImage.progress = Math.min(100, parseInt(100.0 * evt.loaded / evt.total));
            };
            var errf = function(x) {
                alert(x);
            }
            esWebApi.uploadEntityBlob(blobInfo, $scope.userLogoImage, undefined, errf, progressf);
        }

        $scope.fetchPropertySet = function() {
            esWebApi.fetchPropertySet($scope.psCode)
                .then(function(ret) {
                    $scope.psData = ret.data;
                }, function(err) {
                    $scope.psData = JSON.stringify(err);
                });
        }

        $scope.fetchScale = function() {
            esWebApi.fetchESScale($scope.scaleCode)
                .then(function(ret) {
                    $scope.scaleData = JSON.stringify(ret);
                }, function(err) {
                    $scope.scaleData = JSON.stringify(err);
                });
        }

        $scope.fetchPersonlogo = function() {
            esWebApi.fetchPersonLogo($scope.PersonGID)
                .then(function(x) {
                    $scope.personPhoto = x.data;
                });
        }

        // $scope.serviceObj = {
        //     netAssembly: "es.botestapi.service",
        //     netNamespace: "esbotestapiservice/Generic",
        //     netClass: "ESWebApiCustomService",
        //     netIsBinaryResult: false,
        //     netMethod: ""
        // }

        $scope.serviceObj = {
            netAssembly: "eswebapiadmin",
            netNamespace: "Entersoft/WebApps/ESWebApiAdmin",
            netClass: "ESApiAdmin",
            netIsBinaryResult: false,
            netMethod: "GetSessionsInfo"
        };
        $scope.netParam = JSON.stringify({ fItemGID: "3FDF056B-7668-4094-94A4-01DAC6AED2BF", BaseQty: 23, Comment: "Hi 1" });

        $scope.execEbsService = function() {
            esWebApi.ebsService($scope.serviceObj, $scope.netParam)
                .then(function(ret) {
                    $scope.ebsret = ret.data;
                }, function(err) {
                    $scope.ebsret = JSON.stringify(err);
                });
        }

    }
]);

smeControllers.controller('pqCtrl', ['$location', '$scope', '$log', 'esWebApi', 'esUIHelper', '_', 'esCache', 'esMessaging', 'esGlobals',
    function($location, $scope, $log, esWebApiService, esWebUIHelper, _, cache, esMessaging, esGlobals) {

    	$scope.myPqDef = {
            "AA": 1000,
            "ID": "PQ_1000",
            "GroupID": "BUSENT",
            "Title": {
                "en": "Trade accounts",
                "el": "Συναλλασσόμενοι",
                "ro": "Conturi comerciale",
                "bg": "Контрагенти"
            },
            "Description": "Συναλλασσόμενοι",
            "ESUIType": "esCombo",
            "esDef": [[{
                    "AA": 1010,
                    "ID": "PQ_1010",
                    "Title": "Πελάτες",
                    "Description": "Πελάτες",
                    "ESUIType": "esGrid",
                    "esDef": {
                        "GroupID": "ESWebManager",
                        "FilterID": "BusEntitiesCustomers",
                        "PQOptions": {
                            "ServerPaging": true,
                            "PageSize": 20,
                            "AutoExecute": false
                        }
                    }
                }],
                [{
                    "AA": 1011,
                    "ID": "PQ_1011",
                    "Title": "Πρόσωπα",
                    "Description": "Πρόσωπα",
                    "ESUIType": "esGrid",
                    "esDef": {
                        "GroupID": "ESWebManager",
                        "FilterID": "BusEntitiesPerson",
                        "PQOptions": {
                            "ServerPaging": true,
                            "PageSize": 20,
                            "AutoExecute": false
                        }
                    }
                }],
                [{
                    "AA": 1012,
                    "ID": "PQ_1012",
                    "Title": "Επιχειρηματικές Επαφές",
                    "Description": "Επιχειρηματικές Επαφές",
                    "ESUIType": "esGrid",
                    "esDef": {
                        "GroupID": "ESWebManager",
                        "FilterID": "BusEntitiesContacts",
                        "PQOptions": {
                            "ServerPaging": true,
                            "PageSize": 20,
                            "AutoExecute": false
                        }
                    }
                }],
                [{
                    "AA": 1013,
                    "ID": "PQ_1013",
                    "Title": "Επιχειρηματικές διευθύνσεις",
                    "Description": "Επιχειρηματικές διευθύνσεις",
                    "ESUIType": "esGrid",
                    "esDef": {
                        "GroupID": "ESWebManager",
                        "FilterID": "BusEntitiesBusinessAddresses",
                        "PQOptions": {
                            "ServerPaging": true,
                            "PageSize": 20,
                            "AutoExecute": false
                        }
                    }
                }]
            ]
        };

        $scope.selRows = [];
        $scope.handleGridOptions = function(arg1) {
            if (!arg1) {
                return arg1;
            }

            arg1.esToolbars = [{
                template: '<a class="k-button" ng-click="doClick(true)">Confirm</a>',
                fnName: 'doClick',
                fnDef: function(a) {
                    var s = $scope;
                    alert("es command" + a + " - " + $scope.selRows.length);
                }
            }]

            arg1.selectable = "multiple, row";
            return arg1;
        };

        var xindx = esMessaging.subscribe("GRID_ROW_CHANGE", function(e, selRows) {
            $scope.selRows = selRows;
        });

        $scope.$on('$destroy', function() {
            esMessaging.unsubscribe(xindx);
        });

        $scope.pqs = [

            /*
                        {
                            groupId: "ES00Documents",
                            filterId: "ES00Documents_def",
                            gridOptions: {},
                            //pVals: new esGlobals.ESParamValues([new esGlobals.ESDateParamVal("ESDCreated", { dRange: 'ESDateRange(Year, -1)'})])
                            pVals: new esGlobals.ESParamValues([new esGlobals.ESDateParamVal("ESDCreated", 'ESDateRange(SpecificDate, #2017/03/03#, SpecificDate, #2017/03/03#)')])
                        },
            */

            {
                groupId: "ESWebManager",
                filterId: "ItemEntryFact",
                gridOptions: {},
                //pVals: new esGlobals.ESParamValues([new esGlobals.ESDateParamVal("ESDCreated", { dRange: 'ESDateRange(Year, -1)'})])
                pVals: new esGlobals.ESParamValues([new esGlobals.ESDateParamVal("Period", { dRange: 'ESDateRange(Year, -1)' })])
            },

            /*
                        {
                            groupId: "ESMMStockItem",
                            filterId: "ESMMStockItem_def",
                            gridOptions: {},
                            pVals: new esGlobals.ESParamValues()
                        },

                        {
                            groupId: "ESFICustomer",
                            filterId: "ESFITradeAccountCustomer_def",
                            gridOptions: {},
                            pVals: new esGlobals.ESParamValues()
                        },

            */
            /*
                        {
                            groupId: "esmis",
                            filterId: "dbkpis",
                            gridOptions: {},
                            pVals: new esGlobals.ESParamValues()
                        },

                        {
                            groupId: "esmmstockitem",
                            filterId: "pricecheckmobile",
                            gridOptions: {},
                            pVals: new esGlobals.ESParamValues()
                        },

                        {
                            groupId: "ESMMStockItem",
                            filterId: "StockItemPhotoList",
                            gridOptions: {},
                            pVals: new esGlobals.ESParamValues()
                        },


                        {
                            groupId: "ESGOPerson",
                            filterId: "CRM_Personlist",
                            gridOptions: {},
                            pVals: new esGlobals.ESParamValues()
                        },

                        {
                            groupId: "ESTMSocialCRM",
                            filterId: "ESTMSMPersonList",
                            gridOptions: {},
                            pVals: new esGlobals.ESParamValues()
                        },


                        {
                            groupId: "ESFIItem",
                            filterId: "ESFIItem_def",
                            gridOptions: {},
                            pVals: new esGlobals.ESParamValues()
                        },


                        {
                            groupId: "ESFICustomer",
                            filterId: "ESFITradeAccountCustomer_def",
                            gridOptions: {},
                            pVals: new esGlobals.ESParamValues()
                        },

                        {
                            groupId: "ESMMStockItem",
                            filterId: "ESMMStockItem_def",
                            gridOptions: {},
                            pVals: new esGlobals.ESParamValues()
                        },
            */
        ];
    }
]);

smeControllers.controller('webpqCtrl', ['$location', '$scope', '$log', 'esWebApi', 'esUIHelper', '_', 'esCache', 'esMessaging', 'esGlobals',
    function($location, $scope, $log, esWebApiService, esWebUIHelper, _, cache, esMessaging, esGlobals) {

        $scope.webPQOptions = {};
        $scope.webPQOptions.theGroupId = "ESWebManager";
        $scope.webPQOptions.theFilterId = "SalesComparisonbyMonth";
        $scope.webPQOptions.theVals = new esGlobals.ESParamValues();

        $scope.tboOptions = new esGlobals.ESPQOptions(-1, -1, true, true);

        $scope.webPQOptions.theGridOptions = {
            //detailTemplate: '<div><es00-documents-detail es-master-row-field="\'ISUDGID\'" /></div>',
            detailTemplate: '<div><es00-documents-detail es-master-row-field="getMasterOptions().selectedMasterField" /></div>',
            detailInit: function(e) {
                $log.info("hi");
                var detScope = e.detailRow.scope();
                detScope.getMasterOptions = function() {
                    return $scope.webPQOptions.theGridOptions;
                };
            }
        };
    }
]);

smeControllers.controller('salesCtrl', ['$q', '$location', '$scope', '$log', 'esWebApi', 'esUIHelper', '_', 'esCache', 'esMessaging', 'esGlobals',
    function($q, $location, $scope, $log, esWebApiService, esWebUIHelper, _, cache, esMessaging, esGlobals) {
        $scope.esPqDef = new esGlobals.ESPublicQueryDef("", "ESWebManager", "ItemEntryFact", new esGlobals.ESPQOptions(), new esGlobals.ESParamValues());
        $scope.esPqDef.UIOptions = {
        	enableChart: true
        };

        $scope.esPqDef.UIOptions.cubeDef = {
            fields: [{
                    dataField: "fItemFamilyCode",
                    area: "row"
                },
                {
                    dataField: "fItemGroupCode",
                    area: "row"
                }, {
                    dataField: "fItemCategoryCode",
                    area: "row"
                }, {
                    dataField: "fActivityCode",
                    area: "row"
                },

                {
                    dataField: "fBusinessUnitCode",
                    area: "row"
                },


                {
                    dataField: "fItemSubcategoryCode",
                    area: "column"
                },
                {
                    dataField: "ESFIItemPeriodics_TurnOver",
                    area: "data",
                    format: {
                    	type: "currency",
                    	precision: 2
                    }
                },
                {
                    dataField: "ESFIItemPeriodics_SalesQty",
                    area: "data"
                }
            ]
        };

       

        $scope.esPqDef.UIOptions.pivotOptions = {
            allowSortingBySummary: true,
            allowSorting: true,
            allowFiltering: true,
            allowExpandAll: true,

            showBorders: true,
            fieldChooser: {
                enabled: true
            },
            "export": {
                enabled: true
            },
            fieldPanel: {
                showDataFields: true,
                showRowFields: true,
                showColumnFields: true,
                showFilterFields: true,
                allowFieldDragging: true,
                visible: true
            }
        };
    }
]);

smeControllers.controller('masdetpqCtrl', ['$location', '$scope', '$log', 'esWebApi', 'esUIHelper', '_', 'esCache', 'esMessaging', 'esGlobals',
    function($location, $scope, $log, esWebApiService, esWebUIHelper, _, cache, esMessaging, esGlobals) {
        $scope.detailOptions = {};
        $scope.detailOptions.theGroupId = "ESFIDocumentSales";
        $scope.detailOptions.theFilterId = "WebOrdersContext";
        $scope.detailOptions.theVals = new esGlobals.ESParamValues([new esGlobals.ESParamVal("ISUDGID")]);
        $scope.detailOptions.theGridOptions = {};

        $scope.detail2Options = {};
        $scope.detail2Options.theGroupId = "ESTMSALESACTIVITIES";
        $scope.detail2Options.theFilterId = "ContextSalesActs";
        $scope.detail2Options.theVals = new esGlobals.ESParamValues([new esGlobals.ESParamVal("ISUDGID")]);
        $scope.detail2Options.theGridOptions = {};

        var mds = new esWebUIHelper.ESRequeryDetailGrids();
        mds.addDetailRelation(new esWebUIHelper.ESMasterDetailGridRelation("abcd", function() {
            return $scope.detailOptions.theGridOptions.dataSource;
        }, function() {
            return $scope.detailOptions.theVals;
        }, "ISUDGID"));
        mds.addDetailRelation(new esWebUIHelper.ESMasterDetailGridRelation("xyz", function() {
            return $scope.detail2Options.theGridOptions.dataSource;
        }, function() {
            return $scope.detail2Options.theVals;
        }));

        $scope.masterOptions = {};
        $scope.masterOptions.theGroupId = "ESGOPerson";
        $scope.masterOptions.theFilterId = "CRM_Personlist";
        $scope.masterOptions.theVals = null;
        $scope.masterOptions.theGridOptions = {
            masterDetailRelations: mds,
        };


        $scope.refresh = function() {
            $scope.detailOptions.theGridOptions.dataSource.read();
        }


    }
]);

smeControllers.controller('surveyCtrl', ['$location', '$scope', '$log', 'esWebApi', 'esUIHelper', '_', 'esCache', 'esMessaging', 'esGlobals',
    function($location, $scope, $log, esWebApiService, esWebUIHelper, _, cache, esMessaging, esGlobals) {

        $scope.surveyDef = {};

        $scope.startFrom = -1;
        $scope.surveyCode = "usage_s1";
        $scope.surveyAns = {};

        $scope.loadSurvey = function() {
            esWebApiService.fetchPropertySet($scope.surveyCode, "2E035E80-BFED-4B45-91D2-1CEB64C2BB7B")
                .then(function(ret) {
                        $scope.surveyDef = ret.data;
                        $scope.startFrom = -1;
                        $scope.surveyCode = "usage_s1";
                        $scope.surveyAns = {};
                    },
                    function(err) {
                        $scope.surveyDef = {};
                        alert(err);
                    });
        }
    }
]);

smeControllers.controller('opportunitiesCtrl', ['$location', '$scope', '$log', 'esWebApi', 'esUIHelper', '_', 'esCache', 'esMessaging', 'esGlobals',
    function($location, $scope, $log, esWebApiService, esWebUIHelper, _, cache, esMessaging, esGlobals) {

        $scope.seriesClick = function(e) {
            if ($scope.masterOptions.Params.fLeadSourceCode.pValue(e.category)) {
                $scope.masterOptions.theGridOptions.dataSource.read();
            }
        };

        var chartOptions = {
            title: "Leads by Lead Source",
            series: [{
                type: 'column',
                field: 'OppRevenue',
                categoryField: 'fLeadSourceCode',
                aggregate: 'sum',
                axis: "Revenue"
            }, {
                type: 'line',
                field: 'OppRevenue',
                categoryField: 'fLeadSourceCode',
                aggregate: 'count',
                axis: "CountOf"
            }],

            valueAxes: [{
                name: "Revenue",
                title: {
                    text: "Turnover (euros)"
                }
            }, {
                name: "CountOf",
                title: {
                    text: "Count Of"
                }
            }],

            categoryAxis: {
                labels: {
                    rotation: 90
                },
                axisCrossingValues: [0, 205]
            },


            tooltip: {
                visible: true,
                template: "#= category #: #= value #"
            },
            pannable: {
                lock: "x"
            },
            zoomable: {
                mousewheel: {
                    lock: "x"
                },
                selection: {
                    lock: "x"
                }
            },
            seriesClick: $scope.seriesClick,
        };

        var pqOptions = new esGlobals.ESPQOptions(-1, -1, true);
        var params = new esGlobals.ESParamValues();
        var treeOptions = {
            autoBind: false
        };
        $scope.esPqDef = new esGlobals.ESPublicQueryDef("", "ESWebManager", "SalesItemHierarchyAnalysis", pqOptions, params, treeOptions, true);
        $scope.esPqDef.esPanelOpen = false;
    }
])

smeControllers.controller('mapsCtrl', ['$log', '$q', '$scope', 'esWebApi', 'esUIHelper', 'esGlobals', 'esCache', 'esGeoLocationSrv',
    function($log, $q, $scope, esWebApi, esWebUIHelper, esGlobals, esCache, esGeoLocationSrv) {

        $scope.myMapOptions = {
            type: "marker",
            color: "#0F0",
            valueField: "esLabel",
            autoBind: true
        };

        $scope.myPQDef = new esGlobals.ESPublicQueryDef("", "ESCMS", "View_ES00GPSLog", new esGlobals.ESPQOptions(), new esGlobals.ESParamValues());
        $scope.myPQDef.esPanelOpen = false;

    }
]);