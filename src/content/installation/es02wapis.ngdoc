@ngdoc overview
@name Entersoft WEB API Server
@sortOrder 200
@description

The latest version of Entersoft WEB API Server (EWAPIS) can be found on GitHub at: {@link https://github.com/entersoftsa/eswebapiserver ES WEB API Server}.

## Installation Requirements and Conditions
1. Microsoft Windows (Windows 7, Windows 8.1, Windows 10, Windows Servers Family)
2. Microsoft Internet Information Server (MS IIS) 64-bit version 7.5 or higher. It is recommended to use IIS 8.0 or IIS 10.0
3. Prior to start installation please make sure that you have added all the Application Development Features of IIS as shown in the screenshot below:
![Turn On Windows Features](images/installation/01.png)
 
## Installation Instructions
1.	Download Entersoft WEB API Server from GitHub: {@link https://github.com/entersoftsa/eswebapiserver ES WEB API Server} as shown in the image below:
![Github ES WEB API Server](images/installation/b01.png)

2.	Open IIS Manager
3.	Go to the node “Default Web Site” and choose Deploy -> Import Application


**ATTENTION: Web Deploy Fetaure**

If Deploy Action is not available in your IIS Intallation, then you have to install Web Deploy on the IIS. 
Instructions on how to install Web Deploy on IIS Manager can be found in 
{@link http://www.iis.net/learn/install/installing-publishing-technologies/installing-and-configuring-web-deploy-on-iis-80-or-later Web Deploy}

![Import Application](images/installation/02.png)
--
4.	Select the zip file that you downloaded from Step 1.
![Import Application](images/installation/03.png)  
5.	Press Next 
![Import Application](images/installation/04.png) 
6.	Press Next (or if you are an expericened user, select Advanced Settings to configure the web site)
7.	Enter the name of the web site that will expose the Entersoft WEB API service
![Import Application](images/installation/05.png) 
8.	Press Next and the installation will begin
9.	After successful installation the IIS Manager will have the new application added under the Default Web Site as shown in the picture:
![Import Application](images/installation/06.png) 
--
**Note:**
* If you are installing the Entersoft WEB API Server on top of an existing application, you will be prompted to specify whether you want a fresh install i.e. remove all existing files first and then install the application, or an update that will leave intact any unnecessary files i.e. not included in the zip being installed.
* If it is a fresh install or a fresh re-install, the directory App_Data might not exist and you will create at the next steps. This directory contains all instance related configuration files and settings and thus is never part of the product installation, otherwise your contents will be overwritten on your next update.
10.	Once installed, right-click on the eswebapi application and choose explore in order to go to the directory where the eswebapi is installed. If the directory App_Data does not exist, create it with the exact name. Copy the file “configSample.json” found in the application’s directory into the App_Data directory and rename it to config.json. So the directory structure would look like as in the picture below:
![Import Application](images/installation/07.png)
11.	Edit the file _App_Data\config.json_ in order to register the Entersoft Application Server(s) that this WEB API Server will serve. For a single EAS the settings will be as following
```js
{
    "TokenLifetimeInMinutes": 100,
    "RefreshTokenIfWithinRemainingPercentage": 0,
    "AdminPassword": "4T0WVxO/s4A=",
    "AllowInsecureHttp":  true,

    "Subscriptions": [
        {
            "SubscriptionID": "",
            "SubscriptionPassword": "CgJHAQYVg+iChKZvXcEKHA==",
            "Bridges": [
                {
                    "BridgeID": "",
                    "DatabaseID": "ES",
                    "CompanyID": "ES",
                    "DefaultUserCredentials": {
                        "UserID": "sme",
                        "Password": "4T0WVxO/s4A=",
                        "BranchID": "ΑΘΗ",
                        "LangID": "el-GR"
                    },
                    "Services": [
                        {
                            "ServiceID": ""
                        }
                    ],
                    "ERPServers": [
                        {
                            "Host": "127.0.0.1",
                            "Port": 8888
                        }
                    ]
                }
            ]
        }
    ]
}
```
# Config file

__TokenLifetimeInMinutes__ is the number in minutes that the generated token will be valid. After that period of time the token will expire and any subsequent calls using this access token will be denied. It should be greater or equal to 1.

__RefreshTokenIfWithinRemainingPercentage__ is the percentage threshold that any call taking place below that threshold a new web api access token will be generated on next api call.
Default value is 0 which means that during the TokenLifetimeInMinutes duration NO regeneration of token will take place. 100 means that a new token will be generated on every api call with the exception the _login_ and _stickySession_.

_Examples_
-RefreshTokenIfWithinRemainingPercentage = 0 (default)
Generate refresh tokens in the last 0% of 60 min = 0 min – no refresh tokens

-RefreshTokenIfWithinRemainingPercentage = 25 
Generate refresh tokens in the last 25% of 60 min = 15 min

-RefreshTokenIfWithinRemainingPercentage = 50 
Generate refresh tokens in the last 50% of 60 min = 30 min

-RefreshTokenIfWithinRemainingPercentage = 75 
Generate refresh token in the last 75% of 60 min = 45 min

-RefreshTokenIfWithinRemainingPercentage = 100
Generate refresh token in the last 100% of 60 min = 60 min i.e. generate a new token on every api call.

A good option is a value of 50 or 75. For renewing and contiuous work without any possible interruption then 100 is the recommended value.

```js
{
    "TokenLifetimeInMinutes": 60,
    "RefreshTokenIfWithinRemainingPercentage": 100,
    "AdminPassword": "4T0WVxO/s4A=",
    "AllowInsecureHttp" :  true,

    "Subscriptions": [
        {
            "SubscriptionID": "",
            "SubscriptionPassword": "CgJHAQYVg+iChKZvXcEKHA==",
            "Bridges": [
                {
                    "BridgeID": "",
                    "DatabaseID": "smedb",
                    "CompanyID": "ES",
                    "DefaultUserCredentials": {
                        "UserID": "admin",
                        "Password": "z7qlymQ0lBrXzhrg+d01BMTBi84orE4x",
                        "BranchID": "ΑΘΗ",
                        "LangID": "el-GR"
                    },
                    "Services": [
                        {
                            "ServiceID": ""
                        }
                    ],
                    "ERPServers": [
                        {
                            "Host": "sme-pc",
                            "Port": 5555
                        },
                        {
                            "Host": "sme-pc",
                            "Port": 3333
                        },
                        {
                            "Host": "sme-pc",
                            "Port": 2222
                        }
                    ]
                }
            ]
        }
    ]
}
```
__Load Balancing__
In the example above, we have registred more than one Entersoft Application Servers to be available as a pool for use by the Entersoft WEB API Server.
If so, then by a random selection algorithm, every call from the Entersoft WEB API to the Entersoft Application Server will be directed to one of those EASs
found in the pool. If for some reason, an Application Server that comes from the pool fails to respond, Entersoft WEB API Server marks it for NOT Use and directs both the current and the subsequent calls to any of the other EASs available in the pool.

If for some reason or some kind of applications, a web api client needs to interact with a specific instance of the EAS that initially served its login 
process then the client has to use the __stickySession__ function of webapi rather than the login. After the initial call to stickysession in order get access
to the appi server, all subsequent calls will be directed to the specific session that was selected from the pool to serve the stickySession.

**AdminPassword** This is to be used later in future releases.

**AllowInsecureHttp** if set to true, this instance of the EWAPIS will respond to calls through plain HTTP, otherwise HTTPS (secure HTTP) will be required and no calls (except one that queries the EWAPIS for its capabilities) will be accepted unless they are under https. If in a production environment the use of HTTPS is strongly recommended because sensitive information could be travelling between the client and the server. In order to deploy an HTTPS solution you will need a valid certificate to be installed on the IIS Server, issued by one of the valid and trusted security authorities (VeriSign, GoDaddy, etc.). In case that for any reason you want to bypass the HTTPS requirement, it is strongly recommended to go for alternative solutions in order to secure the communication between the client and the EWAPIS such as VPN, IP security firewalls, etc., assuming that we are referring to intranet applications – clients that are well known to the system and the access can be controlled.

An instance of EWAPIS can serve one or more EAS either of the same Tax Accounting Entity or of different entities (multi-tenant mode). Each EAS should be registered in the config.json file. For this registration we encounter the following concepts / nodes:
* A list of Subscriptions.
* Each Subscription has **SubscriptionID** which must be unique and a hashed value for a password stored in the **SubscriptionPassword** field.

The Subscription password is required and it should be encrypted. In order to create an encrypted password you may use the Entersoft WEB API test page. This page is available through the browser.
Navigate to the url of the server/site that you have installed and configured your Entersoft WEB API Server installation e.g. http://localhost/esebapi. 

![Subscription Password](images/installation/10.png)

In the bottom section of this page you will find the password encryption tool. In the figure above, we have entered the password **passx** clicked on the encrypt button and we got the encrypted result e.g. 
**CgJHAQYVg+iChKZvXcEKHA==** (for the given password passx). We copy this value and we paste it in the config.json file as the value of the property SubscriptionPasswordas shown in the image below:

![Subscription Password in config.json](images/installation/11.png)

**ATTENTION**
**Since the passx as well as its encrypted value are being used in all our public sources and examples it is strongly recommended to change the SubscriptionPassword in your live or publicly available solutions. 
Otherwise your solution will be vulnerable to intruders.**

* Each Subscription has a list of Bridges that represent a specific connections to an EAS under a unique combination of DatabaseID and CompanyID as specified in the EAS.
* Each Bridge has the following attributes that need to be specified:
* **BridgeID** a unique identifier for the specific Bridge
* **DatabaseID** the EBS database id as specified in the ESDBDEF.XML found in the $\CSConfig directory of the EAS. This is equivalent to the DatabaseID a user selects in the EBS ESMainApp.EXE full login dialog.
* **CompanyID** the EBS Company that this bridge connects to within the companies registered in the DatabaseID. This is equivalent to the CompanyID a user selects in the EBS ESMainApp.EXE full login dialog.
* __DefaultUserCredentials__ Depending on the user login mode that will be selected at the WEB API client application (ERP Mode, Impersonation Mode, B2C mode) the EWAPIS needs to have registered a valid EBS User so that this user will be used by the EWAPIS either at the Impersonation Mode as well as for any operation that can be executed against the EAS without any prior user login (e.g. FetchUserSites). 

**Note:**
Typically, this user should be an administrator but for security and audit trail purposes it is strongly recommended this user not be the default admin users found in any EBS installation such as “esmaster”, “admin”. It is strongly recommended the Sys Admin of EBS installation to create a new user e.g. eswebapi with a strong password and give this user access to all companies and branches from within the EBS User Management screens (for more information please refer to the EBS Manual). In case that you need more elaborate audit trail from all the EWAPIS calls against a specific DatabaseID / CompanyID defined in a Bridge instance, it is recommended to create different EBS users for each specific BridgeID. DefaultUserCredentials include the following attributes need to be specified as in a typical EBS ESMainApp.EXE full login dialog:
* **UserID**
* **Password** this the hashed value stored in the database under the ESGOUser Table in the corresponding record.
* **BranchID**
* **LangID**
* **Services** Each Bridge can support any number of services i.e. Applications (RFA, Expenses, etc). Every WEB API client connects to the EWAPIS in the context of a specific Service. This version of EWAPIS does not fully support Services, so it is recommended to leave this section as in the template.
* **ERPServers** Each Bridge should have at least one or more EAS servers that should be registered under the ERPServers section. Should more than one ERPServers are declared then these servers are required to fully support the DatabaseID, CompanyID and DefaultCredentials that specified under the Bridge definition and will be used in a Round-Robin form for Load Balancing and Fault Tolerant access to the services.
* **HostID** the IP or DNS name of the EAS
* **Port** the port to which the given EAS is listening to
Once config.json is correctly configured you should restart the EWAPI application / site through the IIS Management console and then you can test the connectivity by browsing to the test page:

![Test Site](images/installation/08.png)
 
If installed in the localhost then the test page is accessible by any browser by navigating to http://localhost/eswebapi (where eswebapi is the application name used when installing the EWAPIS)
![Test Site](images/installation/09.png)

The General Password refers to the SubscriptionPassword which if left unchanged is **_passx_**
**AllowHTTP** should be clicked in case that you deployed the EWAPIS in a non-secure server i.e. NOT using HTTPS. If everything is OK then you will see the Alert Message “OK” along with the name of the given user.

# Elastic Search
In order to be able to use the {@link api/es.Services.Web.esElasticSearch esElasticSearch Service} of the {@link #/api Entersoft AnularJS API} you 
have to register the Elastic Search engine to be used with the Entersoft WEB API Server. The registration is done within the context of a Subscription 
i.e. every subscription can have a different Elastic Search Engine for its own purposes) as shown below:
```js
{
    "TokenLifetimeInMinutes": 58,
    "AllowInsecureHttp" :  true,

    "Subscriptions": [
        {
            "SubscriptionID": "",
            "SubscriptionPassword": "CgJHAQYVg+iChKZvXcEKHA==",
            "Bridges": [
                {
                    "BridgeID": "",
                    "DatabaseID": "Entersoft",
                    "CompanyID": "ES",
                    "ElasticSearch": {
                                "Host": "127.0.0.1", // i.e. the IP or DNS Name that resolves to the desired ElasticSearch engine service
                                "Port": 9200 // i.e. integer that represents the external Port that the ElasticSearch engine service has been configured to listen to. According to the ElasticSearch documentation this defaults to port 9200.
                    },
                    "DefaultUserCredentials": {
                        "UserID": "esmaster",
                        "Password": "BTJTgbOPCmh4sZSwkk2ieQ==",
                        "BranchID": "ΑΘ",
                        "LangID": "el-GR"
                    },
                    "Services": [{"ServiceID": ""}],
                    "ERPServers": [{
                            "Host": "xxx.yyy.com",
                            "Port": 1234
                    }]
                }
            ]
        }    
      ]
}
```
For more information about Elastic Search and how to setup and deploy an Elastic Search Engine please visit {@link https://www.elastic.co/guide/en/elasticsearch/reference/current/setup.html ElasticSearch Setup}.
